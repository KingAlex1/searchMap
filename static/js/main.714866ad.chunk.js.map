{"version":3,"sources":["api.js","Map/index.js","Form/index.js","index.js"],"names":["myMap","Map","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","id","className","PureComponent","window","onload","ymaps","ready","center","zoom","controls","myPolyline","placemarkArray","ploliLineArray","coordArr","addPoliline","map","el","coords","Polyline","strokeColor","strokeWidth","strokeOpacity","push","poliline","removePoliline","geoObjects","add","forEach","remove","Form","_Component","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","addressInput","address","handleChange","e","target","setState","handleKeyDown","Promise","resolve","keyCode","_this$state","newAddress","text","toConsumableArray","then","lastAddr","slice","geocode","results","res","firstGeoObject","get","console","log","geometry","getCoordinates","bounds","properties","options","set","getAddressLine","setBounds","checkZoomRange","placemark","Error","catch","alert","message","splice","handleRemove","elId","previousElementSibling","getAttribute","idInt","parseInt","removePlacemark","filter","item","i","removePlaceMark","renderList","_this$state2","content","onClick","_this$state3","onChange","onKeyDown","type","name","placeholder","lib_default","items","moveTransitionDuration","src_Map_0","addressArr","Component","ReactDOM","render","src_Form_0","document","getElementById"],"mappings":"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","file":"static/js/main.714866ad.chunk.js","sourcesContent":["/* global ymaps */\r\n\r\nwindow.onload = function () {\r\n    ymaps.ready(init);\r\n\r\n\r\n    function init() {\r\n        myMap = new ymaps.Map('map', {\r\n            center: [55.751574, 37.573856],\r\n            zoom: 9,\r\n            controls: ['zoomControl']\r\n        })\r\n    }\r\n}\r\n\r\nlet myMap;\r\nlet placemarkArray = [];\r\nlet ploliLineArray = []\r\nlet coordArr = []\r\nlet myPolyline;\r\n\r\nexport function setPlaceMarks(address, id) {\r\n   return ymaps.geocode(address, {results: 1})\r\n        .then(\r\n            function (res) {\r\n                let firstGeoObject = res.geoObjects.get(0)\r\n\r\n                if (firstGeoObject) {\r\n                    console.log('dddd')\r\n                    let coords = firstGeoObject.geometry.getCoordinates(),\r\n                        bounds = firstGeoObject.properties.get('boundedBy');\r\n\r\n\r\n                    firstGeoObject.options.set('preset', 'islands#darkBlueDotIconWithCaption');\r\n                    firstGeoObject.properties.set('iconCaption', firstGeoObject.getAddressLine())\r\n                    myMap.geoObjects.add(firstGeoObject);\r\n                    myMap.setBounds(bounds, {\r\n                        checkZoomRange: true\r\n                    });\r\n\r\n                    placemarkArray.push({\r\n                        placemark: firstGeoObject,\r\n                        id: id,\r\n                        coords: coords\r\n                    })\r\n                    return id\r\n                } else {\r\n                    throw new Error('Неверный адрес')\r\n                }\r\n\r\n            }\r\n        )\r\n        .then((id) => addPoliline(id))\r\n        .catch((e)=>alert(e.message))\r\n}\r\n\r\nfunction addPoliline(id) {\r\n    coordArr = placemarkArray.map((el) => {\r\n        return el.coords\r\n    })\r\n\r\n    myPolyline = new ymaps.Polyline(coordArr, {\r\n        strokeColor: \"#000000\",\r\n        strokeWidth: 4,\r\n        strokeOpacity: 0.5\r\n    })\r\n\r\n    if (id) {\r\n        ploliLineArray.push({\r\n            poliline: myPolyline,\r\n            id: id\r\n        })\r\n    }\r\n\r\n    removePoliline();\r\n    myMap.geoObjects.add(myPolyline);\r\n\r\n    return id\r\n}\r\n\r\nfunction removePoliline() {\r\n    ploliLineArray.forEach((el) => {\r\n        myMap.geoObjects.remove(el.poliline);\r\n    })\r\n\r\n    myMap.geoObjects.remove(myPolyline);\r\n}\r\n\r\nexport function removePlaceMark(id) {\r\n    let removePlacemark = placemarkArray.filter((item) => item.id === id)\r\n\r\n    placemarkArray.forEach((el, i) => {\r\n        if (el.id == id) {\r\n            placemarkArray.splice(i, 1)\r\n        }\r\n    })\r\n\r\n    coordArr = placemarkArray.map((el) => {\r\n        return el.coords\r\n    })\r\n\r\n    myMap.geoObjects.remove(removePlacemark[0].placemark)\r\n    removePoliline()\r\n    if (placemarkArray.length > 1) {\r\n        addPoliline()\r\n    }\r\n}\r\n\r\n","import React, {PureComponent} from 'react'\r\n\r\nimport './index.scss'\r\n\r\n\r\nexport class Map extends PureComponent {\r\n\r\n     render() {\r\n        return (\r\n            <div id='map' className='map'></div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Map","import React, {Component} from 'react'\r\nimport Map from '../Map'\r\nimport DragSortableList from 'react-drag-sortable'\r\nimport {\r\n    removePlaceMark,\r\n    setPlaceMarks\r\n} from '../api'\r\n\r\nimport './index.scss'\r\n\r\nlet id = 0;\r\n\r\nfunction getAddressId() {\r\n    id += 1;\r\n    return id;\r\n}\r\n\r\nexport class Form extends Component {\r\n    state = {\r\n        addressInput: \"\",\r\n        address: []\r\n    }\r\n    handleChange = e => {\r\n        const value = e.target.value\r\n        this.setState({addressInput: value})\r\n    }\r\n\r\n\r\n    handleKeyDown = e => {\r\n\r\n        return new Promise((resolve) => {\r\n            if (e.keyCode === 13) {\r\n                const {addressInput, address} = this.state;\r\n                const newAddress = {\r\n                    text: addressInput,\r\n                    id: getAddressId()\r\n                }\r\n\r\n                this.setState({\r\n                    addressInput: \"\",\r\n                    address: [...address, newAddress]\r\n                })\r\n                resolve()\r\n            }\r\n\r\n\r\n        })\r\n            .then(() => {\r\n                let lastAddr = this.state.address.slice(-1)\r\n                return setPlaceMarks(lastAddr[0].text, lastAddr[0].id)\r\n            })\r\n            .then((res) => {\r\n                if (!res) {\r\n                    this.setState(state => ({\r\n                        address: state.address.splice(0,  state.address.length-1)\r\n                    }))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(e.message)\r\n            })\r\n\r\n\r\n    }\r\n\r\n    handleRemove = (e) => {\r\n        let elId = e.target.previousElementSibling.getAttribute('id')\r\n        let idInt = parseInt(elId)\r\n        removePlaceMark(idInt)\r\n\r\n        this.setState(state => ({\r\n                address: state.address.filter(\r\n                    item => {\r\n                        return idInt !== item.id\r\n                    }\r\n                )\r\n            }\r\n        ))\r\n    }\r\n\r\n    renderList = () => {\r\n        const {address, addressInput} = this.state\r\n\r\n        let content = [address.map((el) => (\r\n            {\r\n                content: (<li\r\n                    key={el.id}\r\n                    className='address-item'\r\n                >\r\n                    <div\r\n                        className='address-text'\r\n                        id={el.id}>{el.text}</div>\r\n                    <div\r\n                        className='address-remove'\r\n                        onClick={this.handleRemove}\r\n                    >\r\n                        &#215;\r\n                    </div>\r\n\r\n                </li>)\r\n            }))\r\n\r\n        ]\r\n        return content[0]\r\n    }\r\n\r\n\r\n    render() {\r\n        const {address, addressInput} = this.state\r\n\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='form-section'>\r\n                    <div className='search-section'>\r\n                        <input\r\n                            onChange={this.handleChange}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            value={addressInput}\r\n                            type=\"text\" name='route'\r\n                            className='input-address'\r\n                            placeholder='Введите адрес'\r\n                        />\r\n                    </div>\r\n\r\n                    <ul className='address-list'>\r\n                        <DragSortableList\r\n                            items={this.renderList()}\r\n                            moveTransitionDuration={0.3}\r\n                            type=\"vertical\"/>\r\n                    </ul>\r\n                </div>\r\n                <Map addressArr={address}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Form from './Form';\n\n\nReactDOM.render(<Form/>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}